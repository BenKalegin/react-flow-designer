{"version":3,"sources":["../src/2DTools.js"],"names":[],"mappings":";;;;;;AACA;;;;;AAKO,IAAM,oDAAsB,SAAtB,mBAAsB,CAAC,MAAD,EAAS,MAAT;AAAA,SAAqB;AACtD,OAAG,OAAO,CAAP,GAAW,OAAO,CADiC;AAEtD,OAAG,OAAO,CAAP,GAAW,OAAO;AAFiC,GAArB;AAAA,CAA5B;;AAKP;;;;;AAKO,IAAM,wCAAgB,SAAhB,aAAgB,CAAC,MAAD,EAAS,MAAT;AAAA,SAAqB;AAChD,OAAG,OAAO,CAAP,GAAW,OAAO,CAD2B;AAEhD,OAAG,OAAO,CAAP,GAAW,OAAO;AAF2B,GAArB;AAAA,CAAtB;;AAKP;;;AAGO,IAAM,4CAAkB,SAAlB,eAAkB;AAAA,SAC7B,kBAAU;AACR,QAAI,QAAQ,KAAK,KAAL,CAAW,OAAO,CAAP,GAAW,OAAO,CAA7B,EAAgC,OAAO,CAAP,GAAW,OAAO,CAAlD,IAAuD,GAAvD,GAA6D,KAAK,EAA9E;AACA,QAAI,QAAQ,CAAZ,EAAe;AACb,eAAS,GAAT;AACD;AACD,WAAO,KAAP;AACD,GAP4B;AAAA,CAAxB;;AAUP;;;AAGO,IAAM,gCAAY,SAAZ,SAAY,CAAC,KAAD,EAAQ,MAAR,EAAmB;AAC1C,MAAM,eAAe,SAAf,YAAe;AAAA,WAAO;AAC1B,SAAG,QAAQ,CADe;AAE1B,SAAG,SAAS;AAFc,KAAP;AAAA,GAArB;;AAKA,MAAM,yBAAyB,SAAzB,sBAAyB,CAAC,sBAAD;AAAA,WAC7B,oBAAoB,sBAApB,EAA4C,cAA5C,CAD6B;AAAA,GAA/B;;AAIA,MAAM,6CAA6C,SAA7C,0CAA6C,CAAC,cAAD;AAAA,WACjD,cAAc,cAAd,EAA8B,cAA9B,CADiD;AAAA,GAAnD;;AAIA,MAAM,UAAU,SAAV,OAAU,CAAC,sBAAD,EAAyB,KAAzB;AAAA,WACd,uBAAuB,CAAvB,GAA2B,eACtB,CADL,GACS,MAAM,CADf,IACoB,uBAAuB,CAAvB,GAA2B,eAC1C,CADe,GACX,MAAM,CAFf,IAEoB,uBAAuB,CAAvB,GAA2B,eAC1C,CADe,GACX,MAAM,CAHf,IAGoB,uBAAuB,CAAvB,GAA2B,eAC1C,CADe,GACX,MAAM,CALD;AAAA,GAAhB;;AAQA,SAAO;AACL,oBADK;AAEL,8BAFK;AAGL,kDAHK;AAIL;AAJK,GAAP;AAMD,CA5BM","file":"2DTools.js","sourcesContent":["\n/**\n * substract x and y coordinates beetwen to points\n * @param point1 Object\n * @param point2 Object\n */\nexport const substractCoordinate = (point1, point2) => ({\n  x: point1.x - point2.x,\n  y: point1.y - point2.y,\n});\n\n/**\n * Add x and y coordinates beetwen to points\n * @param point1 Object\n * @param point2 Object\n */\nexport const addCoordinate = (point1, point2) => ({\n  x: point1.x + point2.x,\n  y: point1.y + point2.y,\n});\n\n/**\n * Calculate relative angle beetwen two points\n */\nexport const angleFromSource = source => (\n  target => {\n    let angle = Math.atan2(target.y - source.y, target.x - source.x) * 180 / Math.PI;\n    if (angle < 0) {\n      angle += 360;\n    }\n    return angle;\n  }\n);\n\n/**\n * Define boxmodel object, usefull for absolute rendering coordinates, drag calculation etc...\n */\nexport const defineBox = (width, height) => {\n  const edgeDistance = () => ({\n    x: width / 2,\n    y: height / 2,\n  });\n\n  const absoluteDrawCoordinate = (relativeDrawCoordinate) => (\n    substractCoordinate(relativeDrawCoordinate, edgeDistance())\n  );\n\n  const relativeDrawCoordinateFromCursorDragHandle = (cursorPosition) => (\n    addCoordinate(cursorPosition, edgeDistance())\n  );\n\n  const contain = (relativeDrawCoordinate, point) => (\n    relativeDrawCoordinate.x - edgeDistance()\n        .x < point.x && relativeDrawCoordinate.x + edgeDistance()\n        .x > point.x && relativeDrawCoordinate.y - edgeDistance()\n        .y < point.y && relativeDrawCoordinate.y + edgeDistance()\n        .y > point.y\n    );\n\n  return {\n    contain,\n    edgeDistance,\n    absoluteDrawCoordinate,\n    relativeDrawCoordinateFromCursorDragHandle,\n  };\n};\n"]}