{"version":3,"sources":["../../src/actions/port.actions.js"],"names":[],"mappings":";;;;;;;AAAA;;AAEA;;AAQA;;AACA;;AAEA;;;;;;;AAOO,IAAM,4BAAU,SAAV,OAAU,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,EAA2B,IAA3B;AAAA,WACnB,UAAC,QAAD,EAAW,QAAX,EAAwB;AACpB,YAAM,QAAQ,UAAd;AACA,YAAM,OAAO,MAAM,YAAN,CAAmB,KAAnB,CAAyB,GAAzB,CAA6B,MAA7B,CAAb;AACA,YAAM,wBAAwB,MAAM,YAAN,CAAmB,SAAnB,CAA6B,KAA7B,CAAmC,CAAC,KAAK,QAAN,EAAgB,WAAhB,CAAnC,EAAiE,qBAA/F;AACA,YAAI,QAAQ,oCAAgB,KAAhB,EAAuB,KAAK,EAA5B,CAAZ;AACA,gBAAQ,MAAM,GAAN,CAAU,MAAV,EAAkB,8BAAe;AACrC,gBAAI,MADiC;AAErC,0BAFqC;AAGrC,8BAHqC;AAIrC,kBAAM,mBAAQ,IAAR;AAJ+B,SAAf,CAAlB,CAAR;AAMA,gBAAQ,sBAAsB,KAAtB,EAA6B,KAAK,QAAlC,EAA4C,KAAK,QAAjD,CAAR;AACA,iBAAS;AACL,uDADK;AAEL;AAFK,SAAT;AAIH,KAjBkB;AAAA,CAAhB;;AAoBP;;;;;AAKO,IAAM,8CAAmB,SAAnB,gBAAmB,CAAC,MAAD,EAAS,IAAT,EAAkB;AAC9C,WAAO;AACH,sDADG;AAEH,sBAFG;AAGH;AAHG,KAAP;AAKH,CANM;;AAQP;;;;AAIO,IAAM,kCAAa,SAAb,UAAa;AAAA,WAAW;AACjC,oDADiC;AAEjC;AAFiC,KAAX;AAAA,CAAnB;;AAOA,IAAM,oDAAsB,SAAtB,mBAAsB;AAAA,WAAW;AAC1C;AAD0C,KAAX;AAAA,CAA5B","file":"port.actions.js","sourcesContent":["import { Map } from 'immutable';\n\nimport {\n  FLOWDESIGNER_PORT_ADD,\n  FLOWDESIGNER_PORT_SET_ATTR,\n  FLOWDESIGNER_PORT_REMOVE,\n  FLOWDESIGNER_PORT_MERGE,\n  FLOWDESIGNER_PORT_REMOVE_FROM_NODE,\n} from '../constants/flowdesigner.constants';\n\nimport { getPortsForNode } from '../selectors/portSelectors';\nimport { PortRecord } from '../constants/flowdesigner.model';\n\n/**\n * return an action to create a new port\n * @param {string} nodeId - identifier of the node to wich the created connector should be attached\n * @param {string} portId\n * @param {string} portType\n * @param {Object} attr\n */\nexport const addPort = (nodeId, portId, portType, attr) => (\n    (dispatch, getState) => {\n        const state = getState();\n        const node = state.flowDesigner.nodes.get(nodeId);\n        const calculatePortPosition = state.flowDesigner.nodeTypes.getIn([node.nodeType, 'component']).calculatePortPosition;\n        let ports = getPortsForNode(state)(node.id);\n        ports = ports.set(portId, new PortRecord({\n            id: portId,\n            nodeId,\n            portType,\n            attr: new Map(attr),\n        }));\n        ports = calculatePortPosition(ports, node.position, node.nodeSize);\n        dispatch({\n            type: FLOWDESIGNER_PORT_MERGE,\n            ports,\n        });\n    }\n);\n\n/**\n * return an action to set port attributes\n * @param {string} portId\n * @param {Object} attr\n */\nexport const setPortAttribute = (portId, attr) => {\n    return {\n        type: FLOWDESIGNER_PORT_SET_ATTR,\n        portId,\n        attr,\n    };\n};\n\n/**\n * return an action to remove port and all attached links\n * @param {string} portId\n */\nexport const removePort = portId => ({\n    type: FLOWDESIGNER_PORT_REMOVE,\n    portId,\n});\n\n\n\nexport const removePortsFromNode = nodeId => ({\n    type: FLOWDESIGNER_PORT_REMOVE_FROM_NODE,\n});\n"]}