{"version":3,"sources":["../../src/actions/node.actions.test.js"],"names":[],"mappings":";;AAKA;;;;AACA;;;;AACA;;AAEA;;IAAY,W;;;;;;AATZ,KAAK,MAAL,CAAY,gBAAZ;AACA,KAAK,MAAL,CAAY,aAAZ;AACA,KAAK,MAAL,CAAY,4BAAZ;AACA,KAAK,MAAL,CAAY,UAAZ;;AASA,IAAM,cAAc,sBAApB;AACA,IAAM,YAAY,8BAAmB,WAAnB,CAAlB;;AAEA,SAAS,gEAAT,EAA2E,YAAM;AAC7E,OAAG,8CAAH,EAAmD,YAAM;AACrD,YAAM,kBAAkB,CAAC;AACrB,kBAAM,uBADe;AAErB,oBAAQ,IAFa;AAGrB,0BAAc,EAAE,GAAG,EAAL,EAAS,GAAG,EAAZ,EAHO;AAIrB,kBAAM,EAAE,OAAO,EAAT,EAAa,QAAQ,EAArB,EAJe;AAKrB,sBAAU,UALW;AAMrB,kBAAM;AANe,SAAD,CAAxB;;AASA,YAAM,QAAQ,WAAd;;AAEA,cAAM,QAAN,CAAe,YAAY,OAAZ,CAAoB,IAApB,EAA0B,EAAE,GAAG,EAAL,EAAS,GAAG,EAAZ,EAA1B,EAA4C,EAAE,OAAO,EAAT,EAAa,QAAQ,EAArB,EAA5C,EAAuE,UAAvE,EAAmF,EAAnF,CAAf;;AAEA,eAAO,MAAM,UAAN,EAAP,EAA2B,OAA3B,CAAmC,eAAnC;AACH,KAfD;;AAiBA,OAAG,iDAAH,EAAsD,YAAM;AACxD,YAAM,SAAS,YAAY,cAAZ,CAA2B,IAA3B,EAAiC,aAAjC,CAAf;AACA,eAAO,MAAP,EAAe,OAAf,CAAuB;AACnB,kBAAM,+BADa;AAEnB,oBAAQ,IAFW;AAGnB,sBAAU;AAHS,SAAvB;AAKH,KAPD;;AASA,OAAG,kFAAH,EAAuF,YAAM;AACzF,YAAM,kBAAkB,CAAC;AACrB,kBAAM,wBADe;AAErB,oBAAQ,IAFa;AAGrB,0BAAc,EAAE,GAAG,EAAL,EAAS,GAAG,EAAZ,EAHO;AAIrB,mBAAO,OAAO,EAAP;AAJc,SAAD,CAAxB;;AAOA,YAAM,QAAQ,UAAU;AACpB,0BAAc;AACV,uBAAO,mBAAQ,EAAE,IAAI,EAAE,IAAI,QAAN,EAAgB,UAAU,MAA1B,EAAN,EAAR,CADG;AAEV,2BAAW,mBAAQ;AACf,0BAAM,mBAAQ;AACV,mCAAW,EAAE,uBAAuB;AAAA,uCAAO,EAAP;AAAA,6BAAzB;AADD,qBAAR;AADS,iBAAR,CAFD;AAOV,uBAAO;AAPG;AADM,SAAV,CAAd;;AAYA,cAAM,QAAN,CAAe,YAAY,UAAZ,CAAuB,IAAvB,EAA6B,EAAE,GAAG,EAAL,EAAS,GAAG,EAAZ,EAA7B,CAAf;;AAEA,eAAO,MAAM,UAAN,EAAP,EAA2B,OAA3B,CAAmC,eAAnC;AACH,KAvBD;;AAyBA,OAAG,kBAAH,EAAuB,YAAM;AACzB,eAAO,YAAY,gBAAZ,CAA6B,IAA7B,EAAmC,EAAE,UAAU,IAAZ,EAAnC,CAAP,EAA+D,OAA/D,CAAuE;AACnE,kBAAM,4BAD6D;AAEnE,oBAAQ,IAF2D;AAGnE,kBAAM,EAAE,UAAU,IAAZ;AAH6D,SAAvE;AAKH,KAND;AAOH,CA3DD","file":"node.actions.test.js","sourcesContent":["jest.unmock('./node.actions');\njest.unmock('redux-thunk');\njest.unmock('../selectors/portSelectors');\njest.unmock('reselect');\n\nimport configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\nimport { Map, OrderedMap } from 'immutable';\n\nimport * as nodeActions from './node.actions';\n\n\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\n\ndescribe('Check that node action creators generate proper action objects', () => {\n    it('addNode generate action with 0 configuration', () => {\n        const expectedActions = [{\n            type: 'FLOWDESIGNER_NODE_ADD',\n            nodeId: 'id',\n            nodePosition: { x: 75, y: 75 },\n            size: { width: 50, heigth: 50 },\n            nodeType: 'nodeType',\n            attr: {},\n        }];\n\n        const store = mockStore();\n\n        store.dispatch(nodeActions.addNode('id', { x: 75, y: 75 }, { width: 50, heigth: 50 }, 'nodeType', {}));\n\n        expect(store.getActions()).toEqual(expectedActions);\n    });\n\n    it('updateNodeType should properly update node type', () => {\n        const action = nodeActions.updateNodeType('id', 'newNodeType');\n        expect(action).toEqual({\n            type: 'FLOWDESIGNER_NODE_UPDATE_TYPE',\n            nodeId: 'id',\n            nodeType: 'newNodeType',\n        });\n    });\n\n    it('moveNode generate a proper action object witch nodeId and nodePosition parameter', () => {\n        const expectedActions = [{\n            type: 'FLOWDESIGNER_NODE_MOVE',\n            nodeId: 'id',\n            nodePosition: { x: 10, y: 20 },\n            ports: Object({}),\n        }];\n\n        const store = mockStore({\n            flowDesigner: {\n                nodes: new Map({ id: { id: 'nodeId', nodeType: 'type' } }),\n                nodeTypes: new Map({\n                    type: new Map({\n                        component: { calculatePortPosition: () => ({}) },\n                    }),\n                }),\n                ports: new OrderedMap(),\n            },\n        });\n\n        store.dispatch(nodeActions.moveNodeTo('id', { x: 10, y: 20 }));\n\n        expect(store.getActions()).toEqual(expectedActions);\n    });\n\n    it('setNodeAttribute', () => {\n        expect(nodeActions.setNodeAttribute('id', { selected: true })).toEqual({\n            type: 'FLOWDESIGNER_NODE_SET_ATTR',\n            nodeId: 'id',\n            attr: { selected: true },\n        });\n    });\n});\n"]}