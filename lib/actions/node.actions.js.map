{"version":3,"sources":["../../src/actions/node.actions.js"],"names":[],"mappings":";;;;;;;AAAA;;AAUA;;AAGA;;;;;;;;;AASO,IAAM,4BAAU,SAAV,OAAU,CAAC,MAAD,EAAS,YAAT,EAAuB,QAAvB,EAAiC,QAAjC,EAA2C,IAA3C;AAAA,WACnB,UAAC,QAAD,EAAW,QAAX,EAAwB;AACpB,YAAM,QAAQ,UAAd;AACA,YAAM,OAAO,YAAY,MAAM,YAAN,CAAmB,SAAnB,CAA6B,KAA7B,CAAmC,CAAC,QAAD,EAAW,WAAX,CAAnC,EAA4D,IAArF;AACA,iBAAS;AACL,qDADK;AAEL,0BAFK;AAGL,sCAHK;AAIL,sBAJK;AAKL,8BALK;AAML;AANK,SAAT;AAQH,KAZkB;AAAA,CAAhB;;AAgBP;;;;;;AAMO,IAAM,0CAAiB,SAAjB,cAAiB,CAAC,MAAD,EAAS,QAAT;AAAA,WAAuB;AACjD,yDADiD;AAEjD,sBAFiD;AAGjD;AAHiD,KAAvB;AAAA,CAAvB;;AAMP;;;;;;AAMO,IAAM,kCAAa,SAAb,UAAa,CAAC,MAAD,EAAS,YAAT;AAAA,WACtB,UAAC,QAAD,EAAW,QAAX,EAAwB;AACpB,YAAM,QAAQ,UAAd;AACA,YAAM,OAAO,MAAM,YAAN,CAAmB,KAAnB,CAAyB,GAAzB,CAA6B,MAA7B,CAAb;AACA,YAAM,wBAAwB,MAAM,YAAN,CAAmB,SAAnB,CAA6B,KAA7B,CAAmC,CAAC,KAAK,QAAN,EAAgB,WAAhB,CAAnC,EAAiE,qBAA/F;AACA,YAAI,QAAQ,oCAAgB,KAAhB,EAAuB,KAAK,EAA5B,CAAZ;AACA,gBAAQ,sBAAsB,KAAtB,EAA6B,YAA7B,EAA2C,KAAK,QAAhD,CAAR;AACA,iBAAS;AACL,sDADK;AAEL,0BAFK;AAGL,sCAHK;AAIL;AAJK,SAAT;AAMH,KAbqB;AAAA,CAAnB;;AAgBP;;;;;;AAMO,IAAM,oCAAc,SAAd,WAAc,CAAC,MAAD,EAAS,QAAT;AAAA,WAAuB;AAC9C,sDAD8C;AAE9C,sBAF8C;AAG9C;AAH8C,KAAvB;AAAA,CAApB;;AAMP;;;;;AAKO,IAAM,8CAAmB,SAAnB,gBAAmB,CAAC,MAAD,EAAS,IAAT;AAAA,WAAmB;AAC/C,sDAD+C;AAE/C,sBAF+C;AAG/C;AAH+C,KAAnB;AAAA,CAAzB;;AAMP;;;;;AAKO,IAAM,oDAAsB,SAAtB,mBAAsB,CAAC,MAAD,EAAS,OAAT;AAAA,WAAsB;AACrD,yDADqD;AAErD,sBAFqD;AAGrD;AAHqD,KAAtB;AAAA,CAA5B;;AAMP;;;;AAIO,IAAM,kCAAa,SAAb,UAAa;AAAA,WACtB,UAAC,QAAD,EAAW,QAAX,EAAwB;AACpB,YAAM,QAAQ,UAAd;AACA,YAAM,QAAQ,MAAM,YAAN,CAAmB,KAAnB,CAAyB,MAAzB,CAAgC;AAAA,mBAAQ,KAAK,MAAL,KAAgB,MAAxB;AAAA,SAAhC,CAAd;AACA,YAAM,UAAU,MAAM,YAAN,CAAmB,KAAnB,CAAyB,MAAzB,CAAgC;AAAA,mBAAQ,MAAM,IAAN,CAAW;AAAA,uBAAQ,KAAK,EAAL,KAAY,KAAK,QAAjB,IAA6B,KAAK,EAAL,KAAY,KAAK,QAAtD;AAAA,aAAX,CAAR;AAAA,SAAhC,EAAoH,GAApH,CAAwH;AAAA,mBAAQ,KAAK,EAAb;AAAA,SAAxH,CAAhB;AACA,iBAAS;AACL,wDADK;AAEL,0BAFK;AAGL;AAHK,SAAT;AAKH,KAVqB;AAAA,CAAnB","file":"node.actions.js","sourcesContent":["import {\n  FLOWDESIGNER_NODE_MOVE,\n  FLOWDESIGNER_NODE_ADD,\n  FLOWDESIGNER_NODE_UPDATE_TYPE,\n  FLOWDESIGNER_NODE_SET_ATTR,\n  FLOWDESIGNER_NODE_REMOVE_ATTR,\n  FLOWDESIGNER_NODE_SET_SIZE,\n  FLOWDESIGNER_NODE_REMOVE,\n} from '../constants/flowdesigner.constants';\n\nimport { getPortsForNode } from '../selectors/portSelectors';\n\n\n/**\n * Ask for node creation and injection into current dataflow\n * @param {string} nodeId\n * @param {{x: number, y: number}} nodePosition\n * @param {{height: number, width: number}} nodeSize\n * @param {string} nodeType\n * @param {Object} attr\n * @return {Object}\n */\nexport const addNode = (nodeId, nodePosition, nodeSize, nodeType, attr) => (\n    (dispatch, getState) => {\n        const state = getState();\n        const size = nodeSize || state.flowDesigner.nodeTypes.getIn([nodeType, 'component']).size;\n        dispatch({\n            type: FLOWDESIGNER_NODE_ADD,\n            nodeId,\n            nodePosition,\n            size,\n            nodeType,\n            attr,\n        });\n    }\n);\n\n\n/**\n * Ask to update node type of a specific node\n * @param {string} nodeId\n * @param {string} nodeType\n * @return {Object}\n */\nexport const updateNodeType = (nodeId, nodeType) => ({\n    type: FLOWDESIGNER_NODE_UPDATE_TYPE,\n    nodeId,\n    nodeType,\n});\n\n/**\n * Ask for moving node\n * @param {string} nodeId - identifier of the targeted node\n * @param {{x: number, y: number}} nodePosition - the new absolute position of the node\n * @return {Object}\n */\nexport const moveNodeTo = (nodeId, nodePosition) => (\n    (dispatch, getState) => {\n        const state = getState();\n        const node = state.flowDesigner.nodes.get(nodeId);\n        const calculatePortPosition = state.flowDesigner.nodeTypes.getIn([node.nodeType, 'component']).calculatePortPosition;\n        let ports = getPortsForNode(state)(node.id);\n        ports = calculatePortPosition(ports, nodePosition, node.nodeSize);\n        dispatch({\n            type: FLOWDESIGNER_NODE_MOVE,\n            nodeId,\n            nodePosition,\n            ports,\n        });\n    }\n);\n\n/**\n * set node size\n * @param {string} nodeId\n * @param {{height: number, width: number}} nodeSize\n * @return {Object}\n */\nexport const setNodeSize = (nodeId, nodeSize) => ({\n    type: FLOWDESIGNER_NODE_SET_SIZE,\n    nodeId,\n    nodeSize,\n});\n\n/**\n * Give the ability to set any data onto the node\n * @param {string} nodeId\n * @param {Object} attr\n */\nexport const setNodeAttribute = (nodeId, attr) => ({\n    type: FLOWDESIGNER_NODE_SET_ATTR,\n    nodeId,\n    attr,\n});\n\n/**\n * Ask to remove an attribute on target node\n * @param {string} nodeId\n * @param {string} attrKey - the key of the attribute to be removed\n */\nexport const removeNodeAttribute = (nodeId, attrKey) => ({\n    type: FLOWDESIGNER_NODE_REMOVE_ATTR,\n    nodeId,\n    attrKey,\n});\n\n/**\n * Ask for removal of target node and each ports/links attached to it\n * @param {string} nodeId\n */\nexport const removeNode = nodeId => (\n    (dispatch, getState) => {\n        const state = getState();\n        const ports = state.flowDesigner.ports.filter(port => port.nodeId === nodeId);\n        const linksId = state.flowDesigner.links.filter(link => ports.find(port => port.id === link.sourceId || port.id === link.targetId)).map(link => link.id);\n        dispatch({\n            type: FLOWDESIGNER_NODE_REMOVE,\n            nodeId,\n            linksId,\n        });\n    }\n);\n"]}