{"version":3,"sources":["../../src/selectors/portSelectors.test.js"],"names":[],"mappings":";;AAKA;;AACA;;;;AACA;;IAAY,S;;AACZ;;;;;;AARA,KAAK,MAAL,CAAY,UAAZ;AACA,KAAK,MAAL,CAAY,iBAAZ;AACA,KAAK,MAAL,CAAY,iCAAZ;AACA,KAAK,MAAL,CAAY,gBAAZ;;AAUA,SAAS,4BAAT,EAAuC,YAAM;AACzC,QAAM,QAAQ,6BAAe;AACzB,YAAI,KADqB;AAEzB,gBAAQ,SAFiB;AAGzB,cAAM,mBAAQ,EAAE,MAAM,MAAR,EAAR;AAHmB,KAAf,CAAd;AAKA,QAAM,QAAQ,6BAAe;AACzB,YAAI,KADqB;AAEzB,gBAAQ,SAFiB;AAGzB,cAAM,mBAAQ,EAAE,MAAM,SAAR,EAAR;AAHmB,KAAf,CAAd;AAKA,QAAM,QAAQ,6BAAe;AACzB,YAAI,KADqB;AAEzB,gBAAQ,SAFiB;AAGzB,cAAM,mBAAQ,EAAE,MAAM,MAAR,EAAR;AAHmB,KAAf,CAAd;AAKA,QAAM,QAAQ,6BAAe;AACzB,YAAI,KADqB;AAEzB,gBAAQ,SAFiB;AAGzB,cAAM,mBAAQ,EAAE,MAAM,SAAR,EAAR;AAHmB,KAAf,CAAd;AAKA,QAAM,aAAa;AACf,sBAAc;AACV,mBAAO,qBAAU,GAAV,CAAc,KAAd,EAAqB,6BAAe;AACvC,oBAAI,KADmC;AAEvC,wBAAQ,KAF+B;AAGvC,wBAAQ;AAH+B,aAAf,CAArB,CADG;AAMV,mBAAO,qBACF,GADE,CACE,KADF,EACS,KADT,EAEF,GAFE,CAEE,KAFF,EAES,KAFT,EAGF,GAHE,CAGE,KAHF,EAGS,KAHT,EAIF,GAJE,CAIE,KAJF,EAIS,KAJT;AANG;AADC,KAAnB;;AAeA,eAAW,YAAM;AACb,gBAAQ,WAAR;AACH,KAFD;;AAIA,OAAG,+CAAH,EAAoD,YAAM;AACtD,YAAM,kBAAkB,qBAAU,GAAV,CAAc,KAAd,EAAqB,KAArB,EACnB,GADmB,CACf,KADe,EACR,KADQ,CAAxB;AAEA,eAAO,UAAU,eAAV,CAA0B,UAA1B,CAAP,EAA8C,gBAA9C,CAA+D,eAA/D;AACH,KAJD;;AAMA,sHACgE,YAAM;AAClE,YAAM,kBAAkB,qBAAU,GAAV,CAAc,KAAd,EAAqB,KAArB,CAAxB;AACA,eAAO,UAAU,sBAAV,CAAiC,UAAjC,EAA6C,SAA7C,CAAP,EAAgE,gBAAhE,CAAiF,eAAjF;AACH,KAJD;;AAMA,OAAG,0CAAH,EAA+C,YAAM;AACjD,YAAM,mBAAmB,qBAAU,GAAV,CAAc,KAAd,EAAqB,KAArB,EAA4B,GAA5B,CAAgC,KAAhC,EAAuC,KAAvC,CAAzB;AACA,eAAO,UAAU,YAAV,CAAuB,UAAvB,CAAP,EAA2C,gBAA3C,CAA4D,gBAA5D;AACH,KAHD;;AAKA,mHACgE,YAAM;AAClE,YAAM,kBAAkB,qBAAU,GAAV,CAAc,KAAd,EAAqB,KAArB,CAAxB;AACA,eAAO,UAAU,sBAAV,CAAiC,UAAjC,EAA6C,SAA7C,CAAP,EAAgE,gBAAhE,CAAiF,eAAjF;AACH,KAJD;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAtED","file":"portSelectors.test.js","sourcesContent":["jest.unmock('reselect');\njest.unmock('./portSelectors');\njest.unmock('../constants/flowdesigner.model');\njest.unmock('lodash/memoize');\n\nimport { Map } from 'immutable';\nimport matchers from 'jasmine-immutable-matchers';\nimport * as Selectors from './portSelectors';\nimport {\n  LinkRecord,\n  PortRecord,\n} from '../constants/flowdesigner.model';\n\ndescribe('Testing dataflow selectors', () => {\n    const port1 = new PortRecord({\n        id: 'id1',\n        nodeId: 'nodeId1',\n        attr: new Map({ type: 'SINK' }),\n    });\n    const port2 = new PortRecord({\n        id: 'id2',\n        nodeId: 'nodeId1',\n        attr: new Map({ type: 'EMITTER' }),\n    });\n    const port3 = new PortRecord({\n        id: 'id3',\n        nodeId: 'nodeId2',\n        attr: new Map({ type: 'SINK' }),\n    });\n    const port4 = new PortRecord({\n        id: 'id4',\n        nodeId: 'nodeId2',\n        attr: new Map({ type: 'EMITTER' }),\n    });\n    const givenState = {\n        flowDesigner: {\n            edges: new Map().set('id1', new LinkRecord({\n                id: 'id1',\n                source: 'id1',\n                target: 'id2',\n            })),\n            ports: new Map()\n                .set('id1', port1)\n                .set('id2', port2)\n                .set('id3', port3)\n                .set('id4', port4),\n        },\n    };\n\n    beforeEach(() => {\n        jasmine.addMatchers(matchers);\n    });\n\n    it('getEmitterPorts return a map of Emitter ports', () => {\n        const expectedPortMap = new Map().set('id2', port2)\n            .set('id4', port4);\n        expect(Selectors.getEmitterPorts(givenState)).toEqualImmutable(expectedPortMap);\n    });\n\n    it(`getEmitterPortsForNode return a function\n      wich can be used to retribe emitterPorts form specific node`, () => {\n        const expectedPortMap = new Map().set('id2', port2);\n        expect(Selectors.getEmitterPortsForNode(givenState)('nodeId1')).toEqualImmutable(expectedPortMap);\n    });\n\n    it('getSinkPorts return a map of Sink ports ', () => {\n        const expectedPortsMap = new Map().set('id1', port1).set('id3', port3);\n        expect(Selectors.getSinkPorts(givenState)).toEqualImmutable(expectedPortsMap);\n    });\n\n    it(`getSinkPortsForNode return a function\n      wich can be used to retribe emitterPorts form specific node`, () => {\n        const expectedPortMap = new Map().set('id2', port2);\n        expect(Selectors.getEmitterPortsForNode(givenState)('nodeId1')).toEqualImmutable(expectedPortMap);\n    });\n\n    // it('getFreeSinkConnectors return a map of connectors from a map of nodes', () => {\n    //     const expectedConnectorsMap = new Map().set('id4', new ConnectorRecord({\n    //         id: 'id4',\n    //         type: 'SINK',\n    //     }));\n    //     expect(Selectors.getFreeSinkConnectors(givenState)).toEqualImmutable(expectedConnectorsMap);\n    // });\n});\n"]}