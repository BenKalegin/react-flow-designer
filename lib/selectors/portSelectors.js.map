{"version":3,"sources":["../../src/selectors/portSelectors.js"],"names":[],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,IAAM,WAAW,SAAX,QAAW;AAAA,SAAS,MAAM,YAAN,CAAmB,KAA5B;AAAA,CAAjB;AACA,IAAM,WAAW,SAAX,QAAW;AAAA,SAAS,MAAM,YAAN,CAAmB,KAA5B;AAAA,CAAjB;;AAEA;;;;AAIO,IAAM,4CAAkB,8BAC7B,QAD6B,EAE7B;AAAA,SAAS,uBACP;AAAA,WAAU,MAAM,MAAN,CAAa;AAAA,aAAQ,KAAK,MAAL,KAAgB,MAAxB;AAAA,KAAb,CAAV;AAAA,GADO,CAAT;AAAA,CAF6B,CAAxB;;AAQP;;;;;AAKO,IAAM,4CAAkB,8BAC7B,QAD6B,EAE7B;AAAA,SACE,MAAM,MAAN,CAAa;AAAA,WAAQ,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,MAA0B,SAAlC;AAAA,GAAb,CADF;AAAA,CAF6B,CAAxB;;AAOP;;;;;AAKO,IAAM,sCAAe,8BAC1B,QAD0B,EAE1B;AAAA,SACE,MAAM,MAAN,CAAa;AAAA,WAAQ,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,MAA0B,MAAlC;AAAA,GAAb,CADF;AAAA,CAF0B,CAArB;;AAOP;;;AAGO,IAAM,0DAAyB,8BACpC,eADoC,EAEpC;AAAA,SACE;AAAA,WAAU,MAAM,MAAN,CAAa;AAAA,aAAQ,KAAK,MAAL,KAAgB,MAAxB;AAAA,KAAb,CAAV;AAAA,GADF;AAAA,CAFoC,CAA/B;;AAOP;;;AAGO,IAAM,oDAAsB,8BACjC,YADiC,EAEjC;AAAA,SACE;AAAA,WAAU,MAAM,MAAN,CAAa;AAAA,aAAQ,KAAK,MAAL,KAAgB,MAAxB;AAAA,KAAb,CAAV;AAAA,GADF;AAAA,CAFiC,CAA5B;;AAOP;;;;;;AAMO,IAAM,8CAAmB,8BAC9B,CAAC,YAAD,EAAe,QAAf,CAD8B,EAE9B,UAAC,SAAD,EAAY,KAAZ;AAAA,SACE,UAAU,MAAV,CAAiB;AAAA,WACf,CAAC,MAAM,IAAN,CAAW;AAAA,aACV,KAAK,MAAL,KAAgB,SAAS,EADf;AAAA,KAAX,CADc;AAAA,GAAjB,CADF;AAAA,CAF8B,CAAzB;;AAWP;;;;;;AAMO,IAAM,oDAAsB,8BACjC,CAAC,gBAAD,CADiC,EAEjC;AAAA,SACE,cAAc,MAAd,CAAqB;AAAA,WAAY,SAAS,SAArB;AAAA,GAArB,CADF;AAAA,CAFiC,CAA5B","file":"portSelectors.js","sourcesContent":["import { createSelector } from 'reselect';\nimport memoize from 'lodash/memoize';\n\nconst getPorts = state => state.flowDesigner.ports;\nconst getLinks = state => state.flowDesigner.links;\n\n/**\n * Create and return function who will return all ports for a specific node\n * @return {getPortsForNode}\n */\nexport const getPortsForNode = createSelector(\n  getPorts,\n  ports => memoize(\n    nodeId => ports.filter(port => port.nodeId === nodeId)\n  )\n);\n\n\n/**\n * Get all the data Emitter port attached to every nodes as a single map of port\n * map key is the port id\n * @return Map\n */\nexport const getEmitterPorts = createSelector(\n  getPorts,\n  ports => (\n    ports.filter(port => port.attr.get('type') === 'EMITTER')\n  )\n);\n\n/**\n * Get all the data Sink port attached to every nodes as a single map of port\n * map key is the port id\n * @return Map\n */\nexport const getSinkPorts = createSelector(\n  getPorts,\n  ports => (\n    ports.filter(port => port.attr.get('type') === 'SINK')\n  )\n);\n\n/**\n * Create and return function who will return all Emitter ports for a specific node\n */\nexport const getEmitterPortsForNode = createSelector(\n  getEmitterPorts,\n  ports => (\n    nodeId => ports.filter(port => port.nodeId === nodeId)\n  )\n);\n\n/**\n * Create and return function who will return all Sink ports for a specific node\n */\nexport const getSinkPortsForNode = createSelector(\n  getSinkPorts,\n  ports => (\n    nodeId => ports.filter(port => port.nodeId === nodeId)\n  )\n);\n\n/**\n * Get all the data Sink port attached to every nodes not attached at a single edge\n * as a single map of port\n * map key is the port id\n * @return Map\n */\nexport const getFreeSinkPorts = createSelector(\n  [getSinkPorts, getLinks],\n  (sinkPorts, edges) => (\n    sinkPorts.filter(sinkPort => (\n      !edges.find(edge => (\n        edge.target === sinkPort.id\n      ))\n    ))\n  )\n);\n\n/**\n * Get all the data sink port attached to every node not attached at a single edge\n * as single map of port with an generated attached key\n * map key is the port id\n * @return Map\n */\nexport const getActionKeyedPorts = createSelector(\n  [getFreeSinkPorts],\n  freeSinkPorts => (\n    freeSinkPorts.filter(sinkPort => sinkPort.accessKey)\n  )\n);\n"]}