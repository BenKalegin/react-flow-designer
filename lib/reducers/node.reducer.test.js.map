{"version":3,"sources":["../../src/reducers/node.reducer.test.js"],"names":[],"mappings":"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","file":"node.reducer.test.js","sourcesContent":["jest.unmock('immutable');\njest.unmock('jasmine-immutable-matchers');\njest.unmock('../constants/flowdesigner.model');\njest.unmock('./node.reducer');\n\nimport { Map } from 'immutable';\nimport matchers from 'jasmine-immutable-matchers';\nimport nodeReducer from './node.reducer';\n\nimport { NodeRecord, PositionRecord, SizeRecord } from '../constants/flowdesigner.model';\n\ndescribe('Check node reducer', () => {\n    beforeEach(() => {\n        jasmine.addMatchers(matchers);\n    });\n\n    const initialState = new Map().set('id1', new NodeRecord({\n        id: 'id1',\n        nodeType: 'type1',\n        position: new PositionRecord({ x: 10, y: 10 }),\n        attr: new Map({ selected: true }),\n    })).set('id2', new NodeRecord({\n        id: 'id2',\n        nodeType: 'type2',\n        position: new PositionRecord({ x: 10, y: 10 }),\n        attr: new Map({ selected: false }),\n    }));\n\n    it('FLOWDESIGNER_NODE_ADD properly add a new node to the node collection', () => {\n        expect(nodeReducer(new Map(), {\n            type: 'FLOWDESIGNER_NODE_ADD',\n            nodeId: 'id',\n            nodePosition: { x: 10, y: 10 },\n        })).toEqualImmutable(new Map().set('id', new NodeRecord({\n            id: 'id',\n            nodeType: undefined,\n            position: new PositionRecord({ x: 10, y: 10 }),\n            nodeSize: new SizeRecord({ width: undefined, height: undefined }),\n            attr: new Map(),\n        })));\n    });\n\n    it('FLOWDESIGNER_NODE_ADD add a new node to the node collection with the right type', () => {\n        expect(nodeReducer(new Map(), {\n            type: 'FLOWDESIGNER_NODE_ADD',\n            nodeId: 'id',\n            nodeType: 'MY_NODE_TYPE',\n            nodePosition: { x: 10, y: 10 },\n        })).toEqualImmutable(new Map().set('id', new NodeRecord({\n            id: 'id',\n            position: new PositionRecord({ x: 10, y: 10 }),\n            nodeType: 'MY_NODE_TYPE',\n            nodeSize: new SizeRecord({ width: undefined, height: undefined }),\n            attr: new Map(),\n        })));\n    });\n\n    it('updateNodeType', () => {\n        expect(nodeReducer(initialState, {\n            type: 'FLOWDESIGNER_NODE_UPDATE_TYPE',\n            nodeId: 'id2',\n            nodeType: 'new node type',\n        })).toEqualImmutable(new Map().set('id1', new NodeRecord({\n            id: 'id1',\n            position: new PositionRecord({ x: 10, y: 10 }),\n            nodeType: 'type1',\n            attr: new Map({ selected: true }),\n        })).set('id2', new NodeRecord({\n            id: 'id2',\n            position: new PositionRecord({ x: 10, y: 10 }),\n            nodeType: 'new node type',\n            attr: new Map({ selected: false }),\n        })));\n    });\n\n  // TODO\n    it('move node update node position', () => {\n        expect(nodeReducer(initialState, {\n            type: 'FLOWDESIGNER_NODE_MOVE',\n            nodeId: 'id2',\n            nodePosition: { x: 50, y: 50 },\n        })).toEqualImmutable(new Map().set('id1', new NodeRecord({\n            id: 'id1',\n            position: new PositionRecord({ x: 10, y: 10 }),\n            nodeType: 'type1',\n            attr: new Map({ selected: true }),\n        })).set('id2', new NodeRecord({\n            id: 'id2',\n            position: new PositionRecord({ x: 50, y: 50 }),\n            nodeType: 'type2',\n            attr: new Map({ selected: false }),\n        })));\n    });\n});\n"]}