{"version":3,"sources":["../../src/components/NodesRenderer.component.jsx"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAM,gBAAgB,gBAAM,WAAN,CAAkB;AAAA;AACpC,cADoC,sBACzB,IADyB,EACnB;AACb,YAAM,oBAAoB,KAAK,KAAL,CAAW,WAAX,CAAuB,KAAK,QAA5B,EAAsC,SAAhE;AACA,YAAI,CAAC,iBAAL,EAAwB;AACpB,qCACA,KADA;AAKH;AACD,eACE,8BAAC,iBAAD,IAAmB,MAAM,IAAzB,EAA+B,YAAY,KAAK,KAAL,CAAW,UAAtD,EAAkE,KAAK,KAAK,EAA5E,GADF;AAGH,KAbmC;AAcpC,UAdoC,oBAc3B;AACL,eACE;AAAA;AAAA;AACG,iBAAK,KAAL,CAAW,KAAX,CAAiB,GAAjB,CAAqB,KAAK,UAA1B;AADH,SADF;AAKH;AApBmC,CAAlB,CAAtB;;kBAwBe,a","file":"NodesRenderer.component.js","sourcesContent":["import React from 'react';\nimport invariant from 'invariant';\n\nconst NodesRenderer = React.createClass({\n    renderNode(node) {\n        const ConcreteComponent = this.props.nodeTypeMap[node.nodeType].component;\n        if (!ConcreteComponent) {\n            invariant(\n            false,\n            `<NodesRenderer />  the defined node type in your graph model hasn\\'t been mapped into\n            the dataflow configuration, check NodeType documentation`\n          );\n        }\n        return (\n          <ConcreteComponent node={node} moveNodeTo={this.props.moveNodeTo} key={node.id} />\n    );\n    },\n    render() {\n        return (\n          <g>\n            {this.props.nodes.map(this.renderNode)}\n          </g>\n        );\n    },\n\n});\n\nexport default NodesRenderer;\n"]}