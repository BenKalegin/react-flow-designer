{"version":3,"sources":["../../../src/components/node/AbstractNode.component.jsx"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA;;;;AAGA;;;;;;;AAOA,IAAM,wBAAwB,SAAxB,qBAAwB,CAAC,KAAD,EAAQ,YAAR,EAAsB,QAAtB,EAAmC;AAC7D,QAAI,oBAAoB,oBAAxB;AACA,QAAM,eAAe,MAAM,MAAN,CAAa;AAAA,eAAQ,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,MAA0B,SAAlC;AAAA,KAAb,CAArB;AACA,QAAM,YAAY,MAAM,MAAN,CAAa;AAAA,eAAQ,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,MAA0B,MAAlC;AAAA,KAAb,CAAlB;AACA,QAAM,QAAQ,CAAC,aAAa,CAAd,EAAiB,aAAa,CAAb,GAAiB,SAAS,MAA3C,CAAd;AACA,QAAM,gBAAgB,4BACb,MADa,CACN,CAAC,CAAD,EAAI,aAAa,IAAb,GAAoB,CAAxB,CADM,EAEb,KAFa,CAEP,KAFO,CAAtB;AAGA,QAAM,aAAa,4BACV,MADU,CACH,CAAC,CAAD,EAAI,UAAU,IAAV,GAAiB,CAArB,CADG,EAEV,KAFU,CAEJ,KAFI,CAAnB;AAGA,QAAI,gBAAgB,CAApB;AACA,QAAI,aAAa,CAAjB;AACA,iBAAa,OAAb,CAAqB,gBAAQ;AACzB,yBAAiB,CAAjB;AACA,YAAM,WAAW;AACb,eAAG,aAAa,CAAb,GAAiB,SAAS,KADhB;AAEb,eAAG,cAAc,aAAd;AAFU,SAAjB;AAIA,4BAAoB,kBAAkB,GAAlB,CAAsB,KAAK,EAA3B,EAA+B,KAAK,GAAL,CAAS,UAAT,EAAqB,QAArB,CAA/B,CAApB;AACH,KAPD;AAQA,cAAU,OAAV,CAAkB,gBAAQ;AACtB,sBAAc,CAAd;AACA,YAAM,WAAW;AACb,eAAG,aAAa,CADH;AAEb,eAAG,WAAW,UAAX;AAFU,SAAjB;AAIA,4BAAoB,kBAAkB,GAAlB,CAAsB,KAAK,EAA3B,EAA+B,KAAK,GAAL,CAAS,UAAT,EAAqB,QAArB,CAA/B,CAApB;AACH,KAPD;AAQA,WAAO,iBAAP;AACH,CA9BD;;AAgCO,IAAM,sBAAO,gBAAM,WAAN,CAAkB;AAAA;;AAClC,eAAW;AACP,cAAM,iBAAU,KAAV,CAAgB;AAClB,gBAAI,iBAAU,MAAV,CAAiB,UADH;AAElB,sBAAU,iBAAU,KAAV,CAAgB;AACtB,mBAAG,iBAAU,MAAV,CAAiB,UADE;AAEtB,mBAAG,iBAAU,MAAV,CAAiB;AAFE,aAAhB;AAFQ,SAAhB,CADC;AAQP,qBAAa,iBAAU,IARhB;AASP,gBAAQ,iBAAU,IATX;AAUP,mBAAW,iBAAU,IAVd;AAWP,iBAAS,iBAAU,IAXZ;AAYP,kBAAU,iBAAU;AAZb,KADuB;AAelC,aAAS,EAAE,4CAAF,EAfyB;AAgBlC,qBAhBkC,+BAgBd;AAChB,aAAK,MAAL,GAAc,yBAAO,KAAK,WAAZ,CAAd;AACA,aAAK,MAAL,CAAY,IAAZ,CAAiB,CAAC,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAjB,CAAjB;AACA,aAAK,MAAL,CAAY,IAAZ,CACI,oBACC,EADD,CACI,OADJ,EACa,KAAK,WADlB,EAEC,EAFD,CAEI,MAFJ,EAEY,KAAK,MAFjB,EAGC,EAHD,CAGI,KAHJ,EAGW,KAAK,SAHhB,CADJ;AAMH,KAzBiC;AA0BlC,yBA1BkC,iCA0BZ,SA1BY,EA0BD;AAC7B,eAAO,cAAc,KAAK,KAA1B;AACH,KA5BiC;AA6BlC,wBA7BkC,kCA6BX;AACnB,aAAK,MAAL,CAAY,MAAZ;AACH,KA/BiC;AAgClC,WAhCkC,qBAgCxB;AACN,YAAI,KAAK,KAAL,CAAW,OAAf,EAAwB;AACpB,iBAAK,KAAL,CAAW,OAAX;AACH;AACJ,KApCiC;AAqClC,eArCkC,yBAqCpB;AACV,YAAI,KAAK,KAAL,CAAW,WAAf,EAA4B;AACxB,iBAAK,KAAL,CAAW,WAAX;AACH;AACJ,KAzCiC;AA0ClC,UA1CkC,oBA0CzB;AACL,aAAK,MAAL,CAAY,IAAZ,CAAiB,CAAC,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAjB,CAAjB;AACA,aAAK,KAAL,CAAW,UAAX,CAAsB,KAAK,KAAL,CAAW,IAAX,CAAgB,EAAtC;AACA,YAAI,KAAK,KAAL,CAAW,MAAf,EAAuB;AACnB,iBAAK,KAAL,CAAW,MAAX;AACH;AACJ,KAhDiC;AAiDlC,aAjDkC,uBAiDtB;AACR,YAAI,KAAK,KAAL,CAAW,SAAf,EAA0B;AACtB,iBAAK,KAAL,CAAW,SAAX;AACH;AACJ,KArDiC;AAsDlC,iBAtDkC,2BAsDlB;AACZ,YAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACrB,mBAAO,KAAK,KAAL,CAAW,QAAlB;AACH;AACD,iCAAU,KAAV;AAEA,eAAO,IAAP;AACH,KA7DiC;AA8DlC,UA9DkC,oBA8DzB;AAAA;;AAAA,YACG,IADH,GACY,KAAK,KADjB,CACG,IADH;;AAEL,eACE;AAAA;AAAA;AACE;AAAA;AAAA,kBAAG,0BAAwB,KAAK,QAAL,CAAc,CAAtC,SAA2C,KAAK,QAAL,CAAc,CAAzD,MAAH,EAAkE,KAAK;AAAA,+BAAM,MAAK,WAAL,GAAmB,CAAzB;AAAA,qBAAvE,EAAoG,SAAS,KAAK,OAAlH;AACG,qBAAK,aAAL;AADH;AADF,SADF;AAOH;AAvEiC,CAAlB,CAAb;;kBA2EQ,I","file":"AbstractNode.component.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport { select, event } from 'd3-selection';\nimport { drag } from 'd3-drag';\nimport { scaleLinear } from 'd3-scale';\nimport { Map } from 'immutable';\n\nimport invariant from 'invariant';\n\nimport './node.css';\n\n\n/**\n * calculate the position of each ports for a given node information\n * @param emitterPorts\n * @param sinkPorts\n * @param nodePosition\n * @param nodeSize\n */\nconst calculatePortPosition = (ports, nodePosition, nodeSize) => {\n    let portsWithPosition = new Map();\n    const emitterPorts = ports.filter(port => port.attr.get('type') === 'EMITTER');\n    const sinkPorts = ports.filter(port => port.attr.get('type') === 'SINK');\n    const range = [nodePosition.y, nodePosition.y + nodeSize.height];\n    const scaleYEmitter = scaleLinear()\n            .domain([0, emitterPorts.size + 1])\n            .range(range);\n    const scaleYSink = scaleLinear()\n            .domain([0, sinkPorts.size + 1])\n            .range(range);\n    let emitterNumber = 0;\n    let sinkNumber = 0;\n    emitterPorts.forEach(port => {\n        emitterNumber += 1;\n        const position = {\n            x: nodePosition.x + nodeSize.width,\n            y: scaleYEmitter(emitterNumber),\n        };\n        portsWithPosition = portsWithPosition.set(port.id, port.set('position', position));\n    });\n    sinkPorts.forEach(port => {\n        sinkNumber += 1;\n        const position = {\n            x: nodePosition.x,\n            y: scaleYSink(sinkNumber),\n        };\n        portsWithPosition = portsWithPosition.set(port.id, port.set('position', position));\n    });\n    return portsWithPosition;\n};\n\nexport const Node = React.createClass({\n    propTypes: {\n        node: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            position: PropTypes.shape({\n                x: PropTypes.number.isRequired,\n                y: PropTypes.number.isRequired,\n            }),\n        }),\n        onDragStart: PropTypes.func,\n        onDrag: PropTypes.func,\n        onDragEnd: PropTypes.func,\n        onClick: PropTypes.func,\n        children: PropTypes.node,\n    },\n    statics: { calculatePortPosition },\n    componentDidMount() {\n        this.d3Node = select(this.nodeElement);\n        this.d3Node.data([this.props.node.position]);\n        this.d3Node.call(\n            drag()\n            .on('start', this.onDragStart)\n            .on('drag', this.onDrag)\n            .on('end', this.onDragEnd)\n        );\n    },\n    shouldComponentUpdate(nextProps) {\n        return nextProps !== this.props;\n    },\n    componentWillUnmount() {\n        this.d3Node.remove();\n    },\n    onClick() {\n        if (this.props.onClick) {\n            this.props.onClick();\n        }\n    },\n    onDragStart() {\n        if (this.props.onDragStart) {\n            this.props.onDragStart(event);\n        }\n    },\n    onDrag() {\n        this.d3Node.data([this.props.node.position]);\n        this.props.moveNodeTo(this.props.node.id, event);\n        if (this.props.onDrag) {\n            this.props.onDrag(event);\n        }\n    },\n    onDragEnd() {\n        if (this.props.onDragEnd) {\n            this.props.onDragEnd(event);\n        }\n    },\n    renderContent() {\n        if (this.props.children) {\n            return this.props.children;\n        }\n        invariant(false, `<Node /> should not be used without giving it a children\n        ex: <Node><rect /></Node>`);\n        return null;\n    },\n    render() {\n        const { node } = this.props;\n        return (\n          <g>\n            <g transform={`translate(${node.position.x},${node.position.y})`} ref={c => (this.nodeElement = c)} onClick={this.onClick}>\n              {this.renderContent()}\n            </g>\n          </g>\n        );\n    },\n});\n\n\nexport default Node;\n"]}