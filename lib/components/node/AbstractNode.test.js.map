{"version":3,"sources":["../../../src/components/node/AbstractNode.test.js"],"names":[],"mappings":";;AAKA;;;;AACA;;AACA;;AAEA;;AACA;;;;;;AAVA,KAAK,MAAL,CAAY,YAAZ;AACA,KAAK,MAAL,CAAY,8BAAZ;AACA,KAAK,MAAL,CAAY,eAAZ;AACA,KAAK,MAAL,CAAY,oCAAZ;;AASA,IAAM,OAAO,6BAAe;AACxB,QAAI,IADoB;AAExB,cAAU,iCAAmB,EAAE,GAAG,GAAL,EAAU,GAAG,EAAb,EAAnB,CAFc;AAGxB,cAAU,6BAAe,EAAE,OAAO,GAAT,EAAc,QAAQ,EAAtB,EAAf,CAHc;AAIxB,UAAM;AAJkB,CAAf,CAAb;;AAOA,SAAS,wBAAT,EAAmC,YAAM;AACrC,OAAG,4DAAH,EAAiE,YAAM;AACnE,YAAM,UAAU,qBAAQ,iEAAc,MAAM,IAApB,GAAR,CAAhB;AACA,YAAM,OAAO,QAAQ,IAAR,CAAa,cAAb,CAAb;AACA,eAAO,KAAK,IAAL,CAAU,WAAV,CAAP,EAA+B,IAA/B,CAAoC,mBAApC;AACH,KAJD;;AAMA,OAAG,+CAAH,EAAoD,YAAM;AACtD,YAAM,UAAU,QAAQ,SAAR,CAAkB,SAAlB,CAAhB;AACA,YAAM,UAAU,qBAAQ,iEAAc,MAAM,IAApB,EAA0B,SAAS,OAAnC,GAAR,CAAhB;AACA,gBAAQ,IAAR,CAAa,cAAb,EAA6B,QAA7B,CAAsC,OAAtC;AACA,eAAO,QAAQ,GAAR,CAAY,QAAZ,EAAP,EAA+B,OAA/B,CAAuC,SAAvC;AACA,eAAO,OAAP,EAAgB,gBAAhB;AACA,eAAO,QAAQ,KAAR,CAAc,KAAd,EAAP,EAA8B,OAA9B,CAAsC,CAAtC;AACH,KAPD;;AASA,OAAG,6DAAH,EAAkE,YAAM;AACpE;AACH,KAFD;;AAIA,OAAG,wDAAH,EAA6D,YAAM;AAC/D;AACH,KAFD;;AAIA,OAAG,2DAAH,EAAgE,YAAM;AAClE;AACH,KAFD;;AAIA,OAAG,gEAAH,EAAqE,YAAM;AACvE,cAAM,OAAN,EAAe,OAAf;AACA,6BAAQ,iEAAc,MAAM,IAApB,GAAR;AACA,eAAO,QAAQ,KAAf,EAAsB,gBAAtB;AACH,KAJD;AAKH,CAjCD","file":"AbstractNode.test.js","sourcesContent":["jest.unmock('classnames');\njest.unmock('./AbstractNode.component.jsx');\njest.unmock('../../2DTools');\njest.unmock('../../constants/flowdesigner.model');\n\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport { Map } from 'immutable';\n\nimport { NodeRecord, PositionRecord, SizeRecord } from '../../constants/flowdesigner.model';\nimport AbstractNode from './AbstractNode.component.jsx';\n\nconst node = new NodeRecord({\n    id: 'id',\n    position: new PositionRecord({ x: 100, y: 50 }),\n    nodeSize: new SizeRecord({ width: 125, height: 75 }),\n    attr: new Map(),\n});\n\ndescribe('Testing <AbstractNode>', () => {\n    it('should create a bare node component with provided position', () => {\n        const wrapper = shallow(<AbstractNode node={node} />);\n        const rect = wrapper.find('g[transform]');\n        expect(rect.prop('transform')).toBe('translate(100,50)');\n    });\n\n    it('call the injected onClick action when clicked', () => {\n        const onClick = jasmine.createSpy('onClick');\n        const wrapper = shallow(<AbstractNode node={node} onClick={onClick} />);\n        wrapper.find('g[transform]').simulate('click');\n        expect(onClick.and.identity()).toEqual('onClick');\n        expect(onClick).toHaveBeenCalled();\n        expect(onClick.calls.count()).toEqual(1);\n    });\n\n    it('call the injected onDragStart action when drag action start', () => {\n        fail();\n    });\n\n    it('call the injected onDrag action when drag action start', () => {\n        fail();\n    });\n\n    it('call the injected onDragEnd action when drag action start', () => {\n        fail();\n    });\n\n    it('should fire an error if its rendered without a children set up', () => {\n        spyOn(console, 'error');\n        shallow(<AbstractNode node={node} />);\n        expect(console.error).toHaveBeenCalled();\n    });\n});\n"]}