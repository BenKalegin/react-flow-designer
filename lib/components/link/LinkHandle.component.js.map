{"version":3,"sources":["../../../src/components/link/LinkHandle.component.jsx"],"names":[],"mappings":";;;;;;AAAA;;;;AAEA;;AACA;;;;AAEA,IAAM,aAAa,gBAAM,WAAN,CAAkB;AAAA;;AACnC,aAAW;AACT,cAAU,iBAAU,KAAV,CAAgB;AACxB,SAAG,iBAAU,MAAV,CAAiB,UADI;AAExB,SAAG,iBAAU,MAAV,CAAiB;AAFI,KAAhB,EAGP,UAJM;AAKT,YAAQ,iBAAU,IAAV,CAAe,UALd;AAMT,eAAW,iBAAU,IAAV,CAAe;AANjB,GADwB;AASnC,iBATmC,6BASjB;AAChB,WAAO;AACL,eAAS;AADJ,KAAP;AAGD,GAbkC;AAcnC,mBAdmC,+BAcf;AAClB,SAAK,QAAL,GAAgB,yBAAO,KAAK,MAAZ,CAAhB;AACA,SAAK,QAAL,CAAc,IAAd,CACE,oBACG,EADH,CACM,OADN,EACe,KAAK,SADpB,EAEG,EAFH,CAEM,MAFN,EAEc,KAAK,IAFnB,EAGG,EAHH,CAGM,KAHN,EAGa,KAAK,OAHlB,CADF;AAMD,GAtBkC;AAuBnC,sBAvBmC,kCAuBZ;AACrB,SAAK,QAAL,CAAc,MAAd;AACD,GAzBkC;AA0BnC,WA1BmC,uBA0BvB;AACV,SAAK,QAAL,CAAc,EAAE,SAAS,IAAX,EAAd;AACD,GA5BkC;AA6BnC,MA7BmC,kBA6B5B;AACL,SAAK,KAAL,CAAW,MAAX;AACD,GA/BkC;AAgCnC,SAhCmC,qBAgCzB;AACR,SAAK,KAAL,CAAW,SAAX;AACA,SAAK,QAAL,CAAc,EAAE,SAAS,KAAX,EAAd;AACD,GAnCkC;AAoCnC,QApCmC,oBAoC1B;AAAA;;AACP,QAAM,eAAe,KAAK,KAAL,CAAW,OAAX,GAAqB,sBAArB,GAA8C,EAAnE;AACA,WACE;AACE,WAAK,aAAC,CAAD;AAAA,eAAO,MAAK,MAAL,GAAc,CAArB;AAAA,OADP;AAEE,UAAI,KAAK,KAAL,CAAW,QAAX,CAAoB,CAF1B,EAE6B,IAAI,KAAK,KAAL,CAAW,QAAX,CAAoB,CAFrD;AAGE,aAAM,GAHR,EAGY,QAAO,GAHnB;AAIE,kCAA0B;AAJ5B,MADF;AAQD;AA9CkC,CAAlB,CAAnB;;kBAiDe,U","file":"LinkHandle.component.js","sourcesContent":["import React, { PropTypes } from 'react';\n\nimport { select, event } from 'd3-selection';\nimport { drag } from 'd3-drag';\n\nconst EdgeHandle = React.createClass({\n  propTypes: {\n    position: PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired,\n    }).isRequired,\n    onDrag: PropTypes.func.isRequired,\n    onDragEnd: PropTypes.func.isRequired,\n  },\n  getInitialState() {\n    return {\n      grabbed: false,\n    };\n  },\n  componentDidMount() {\n    this.d3Handle = select(this.handle);\n    this.d3Handle.call(\n      drag()\n        .on('start', this.dragStart)\n        .on('drag', this.drag)\n        .on('end', this.dragEnd)\n      );\n  },\n  componentWillUnmount() {\n    this.d3Handle.remove();\n  },\n  dragStart() {\n    this.setState({ grabbed: true });\n  },\n  drag() {\n    this.props.onDrag(event);\n  },\n  dragEnd() {\n    this.props.onDragEnd(event);\n    this.setState({ grabbed: false });\n  },\n  render() {\n    const grabbedClass = this.state.grabbed ? 'edge-handle--grabbed' : '';\n    return (\n      <circle\n        ref={(c) => this.handle = c}\n        cx={this.props.position.x} cy={this.props.position.y}\n        width=\"8\" height=\"8\"\n        className={`edge-handle ${grabbedClass}`}\n      />\n    );\n  },\n});\n\nexport default EdgeHandle;\n"]}