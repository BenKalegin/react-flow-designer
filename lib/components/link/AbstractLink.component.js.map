{"version":3,"sources":["../../../src/components/link/AbstractLink.component.jsx"],"names":[],"mappings":"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","file":"AbstractLink.component.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport { connect } from 'react-redux';\n\nimport { line, curveBasis } from 'd3-shape';\nimport { interpolateBasis } from 'd3-interpolate';\n\nimport * as EdgeActionCreator from '../../actions/link.actions';\nimport * as ConnectorActionCreator from '../../actions/port.actions';\n\nimport { getFreeInputConnectors } from '../../selectors/portSelectors';\n\nimport LinkHandle from './LinkHandle.component';\n\nimport './link.css';\n\nconst AbstractLink = React.createClass({\n    propTypes: {\n        link: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }).isRequired,\n    },\n    componentWillMount() {\n        this.line = line().x(d => d.x).y(d => d.y)\n            .curve(curveBasis);\n        this.setState({ targetHandlePosition: this.props.target.position });\n    },\n    componentWillReceiveProps(nextProps) {\n        this.setState({ targetHandlePosition: nextProps.target.position });\n    },\n    shouldComponentUpdate(nextProps) {\n        return nextProps.source !== this.props.source || nextProps.target !== this.props.target;\n    },\n    // onTargetHandleDrag(event) {\n    //     const containingCursorPosition = containing(event);\n    //     const foundConnector = find(this.props.freeInputConnectors)(containingCursorPosition);\n    //     if (foundConnector) {\n    //         this.props.changeConnectorState(foundConnector.id, 'VALID_TARGET');\n    //     } else {\n    //         this.props.resetConnectorsState();\n    //     }\n    //     this.setState({ targetHandlePosition: event });\n    // },\n    // ontTargetHandleDragEnd(event) {\n    //     const containingCursorPosition = containing(event);\n    //     const foundConnector = find(this.props.freeInputConnectors)(containingCursorPosition);\n    //     if (foundConnector) {\n    //         this.props.setEdgeTarget(this.props.edge.data.id, foundConnector.id);\n    //     }\n    //     this.props.resetConnectorsState();\n    // },\n    render() {\n        const pathCoords = [];\n        // if (this.state.targetHandlePosition && this.props.source.position) {\n            pathCoords[0] = this.state.targetHandlePosition;\n            pathCoords[1] = {\n                x: this.state.targetHandlePosition.x - 50,\n                y: this.state.targetHandlePosition.y,\n            };\n            pathCoords[2] = {\n                x: this.props.source.position.x + 50,\n                y: this.props.source.position.y,\n            };\n            pathCoords[3] = {\n                x: this.props.source.position.x + 10,\n                y: this.props.source.position.y,\n            };\n            const xInterpolate = interpolateBasis([pathCoords[0].x, pathCoords[1].x, pathCoords[2].x, pathCoords[3].x]);\n            const yInterpolate = interpolateBasis([pathCoords[0].y, pathCoords[1].y, pathCoords[2].y, pathCoords[3].y]);\n            this.path = this.line(pathCoords);\n            const newChildren = React.Children.map(this.props.children, child => (\n                React.cloneElement(child, { d: this.path, xInterpolate, yInterpolate })\n            ));\n            return (\n                <g>\n                  {newChildren}\n                  <LinkHandle\n                    onDrag={this.onTargetHandleDrag} onDragEnd={this.ontTargetHandleDragEnd}\n                    position={this.state.targetHandlePosition}\n                  />\n                </g>\n            );\n        // }\n        // return null;\n    },\n});\n\nconst mapStateToProps = (state, ownProps) => ({\n    source: state.flowDesigner.ports.get(ownProps.link.sourceId),\n    target: state.flowDesigner.ports.get(ownProps.link.targetId),\n    // freeInputConnectors: getFreeInputConnectors(state),\n});\n\nexport default connect(mapStateToProps, undefined)(AbstractLink);\n"]}