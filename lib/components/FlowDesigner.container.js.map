{"version":3,"sources":["../../src/components/FlowDesigner.container.jsx"],"names":[],"mappings":"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","file":"FlowDesigner.container.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { select } from 'd3-selection';\n\nimport invariant from 'invariant';\n\n\nimport { ZoomHandler } from './ZoomHandler.component';\nimport Grid from './grid/Grid.component';\nimport NodesRenderer from './NodesRenderer.component';\nimport LinksRenderer from './LinksRenderer.component';\nimport PortsRenderer from './PortsRenderer.component';\n\nimport { moveNodeTo } from '../actions/node.actions';\nimport { setNodeTypes } from '../actions/nodeType.actions';\n\nexport const FlowDesigner = React.createClass({\n    getInitialState() {\n        return {\n            nodeTypeMap: {},\n            linkTypeMap: {},\n        };\n    },\n    componentWillMount() {\n        const { children } = this.props;\n        let nodeTypeMap = {};\n        let linkTypeMap = {};\n        if (children) {\n            children.forEach(element => {\n                switch (element.type.displayName) {\n                case 'NodeType':\n                    nodeTypeMap = Object.assign(\n                    {},\n                    nodeTypeMap,\n                        {\n                            [element.props.type]: {\n                                component: element.props.component,\n                            },\n                        }\n                    );\n                    break;\n                case 'LinkType':\n                    linkTypeMap = Object.assign(\n                    {},\n                    linkTypeMap,\n                        {\n                            [element.props.type]: {\n                                component: element.props.component,\n                            },\n                        }\n                    );\n                    break;\n                default:\n                    invariant(\n                    false,\n                    `<${element.type.displayName} /> is an unknown component configuration`\n                );\n                }\n            });\n        } else {\n            invariant(false, '<FlowDesigner /> should have configuration component as child');\n        }\n\n        this.props.setNodeTypes(nodeTypeMap);\n        this.setState({ nodeTypeMap, linkTypeMap });\n    },\n    componentDidMount() {\n        this.d3Node = select('body');\n        // should be destroyed and recreated each time the connector/accesky map is modified\n        // to avoid dispatching unecessary action\n        this.d3Node.on('keydown', () => {\n            this.props.onKeyDown(event.keyCode);\n        });\n    },\n    render() {\n        return (\n          <svg ref={c => (this.node = c)} width=\"100%\" height=\"800\">\n            <defs>\n              <filter id=\"blur-filter\" x=\"-1\" y=\"-1\" width=\"200\" height=\"200\">\n                <feFlood floodColor=\"#01A7CF\" result=\"COLOR\" />\n                <feComposite in=\"COLOR\" in2=\"SourceGraphic\" operator=\"in\" result=\"shadow\" />\n                <feGaussianBlur in=\"shadow\" stdDeviation=\"3\" />\n                <feOffset dx=\"0\" dy=\"0\" />\n                <feMerge>\n                  <feMergeNode />\n                  <feMergeNode in=\"SourceGraphic\" />\n                </feMerge>\n              </filter>\n            </defs>\n            <ZoomHandler>\n              <Grid />\n              <NodesRenderer\n                nodeTypeMap={this.state.nodeTypeMap}\n                moveNodeTo={this.props.moveNodeTo}\n                nodes={this.props.nodes}\n              />\n              <PortsRenderer ports={this.props.ports} />\n              <LinksRenderer linkTypeMap={this.state.linkTypeMap} links={this.props.links} />\n            </ZoomHandler>\n          </svg>\n        );\n    },\n});\n\nconst mapStateToProps = state => ({\n    nodes: state.flowDesigner.nodes,\n    links: state.flowDesigner.links,\n    ports: state.flowDesigner.ports,\n});\n\n\nconst mapDispatchToProps = dispatch => ({\n    setNodeTypes: (nodeTypeMap) => dispatch(setNodeTypes(nodeTypeMap)),\n    moveNodeTo: (nodId, nodePosition) => (dispatch(moveNodeTo(nodId, nodePosition))),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FlowDesigner);\n"]}